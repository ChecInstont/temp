name: CI/CD Pipeline

on:
  push:
    branches:
      - "main"  # Trigger on pushes to the main branch
  # pull_request:
  #   branches:
  #     - "main"  # Trigger on pull requests to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Required Tools (if needed)
      - name: Install jq (JSON parser)
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      # Step 3: Authenticate with Render
      - name: Authenticate with Render
        env:
          RENDER_API_TOKEN: ${{ secrets.RENDER_API_TOKEN }}
        run: |
          if [ -z "$RENDER_API_TOKEN" ]; then
            echo "Render API token not provided. Ensure RENDER_API_TOKEN is set as a repository secret."
            exit 1
          fi
          echo "Authentication with Render API token completed."

      # Step 4: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_IMAGE_NAME }}:latest .
          echo "Docker image built successfully."

      # Step 5: Trigger Deployment to Render via Webhook
      - name: Trigger Render Deployment
        id: deploy
        run: |
          response=$(curl -X POST https://api.render.com/deploy/${{ secrets.RENDER_DEPLOYMENT_HOOK_URL }})
          deployment_id=$(echo $response | jq -r '.deployment.id')

      # Step 6: Poll Deployment Status
      - name: Wait for Deployment to Finish
        run: |
          # Poll Render API until deployment finishes (max 15 minutes)
          max_attempts=30
          attempt=0
          deployment_status="pending"
          
          while [[ "$deployment_status" != "succeeded" && "$deployment_status" != "failed" && $attempt -lt $max_attempts ]]; do
            echo "Checking deployment status... attempt #$((attempt + 1))"
            
            # Fetch the deployment status
            deployment_status=$(curl -s -X GET https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys/$deployment_id \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}")
            
            # Extract the status from the response
            # Ensure the response is JSON and contains the expected deployment data
            if [[ $(echo "$deployment_status" | jq 'type') != '"array"' ]]; then
              echo "Error: Deployment API did not return an array response."
              exit 1
            fi
            deployment_status=$(echo "$deployment_status" | jq -r '.[0].deploy.status')
          
            echo "Current deployment status: $deployment_status"
          
            if [[ "$deployment_status" == "live" ]]; then
              echo "Deployment succeeded."
              break
            elif [[ "$deployment_status" == "failed" ]]; then
              echo "Deployment failed."
              exit 1  # Exit with failure if deployment fails
            else
              echo "Deployment is still in progress. Status: $deployment_status"
            
            fi
          
            # Wait for 30 seconds before checking again
            sleep 30
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -ge $max_attempts ]; then
            echo "Deployment did not complete in the expected time frame."
            exit 1  # Exit with failure if deployment takes too long
          fi
